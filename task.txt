P2 Translating “generics”

We consider the translaton of programs with universal type parameters (aka “generics”). We assume that there are no type bounds and no uses of structural subtyping.

There are two established translation methods where source Go programs with generics are translated to a more simple target language.

    - Monomorphization where we generate type-specific instances

    - Generic translation where each type parameter is replaced by ‘interface{}’.

      1. Apply both translation methods to the three examples below. The first example contains a sketch for each translation method.

      2. Is it possible to apply both translation methods for each example? Why (not)?

      3. What programming language features are required for target programs. Hint: The generic translation method might need to rely on structural subtyping and type assertions.

It is highly recommended to use github for collection of all examples (source code) and a description of your findings (Readme.md).


Example linked list

type node[T any] struct {
    val  T
    next *node[T]
}

func mkNode[T any](v T) *node[T] {
    return &node[T]{val: v, next: nil}
}

func insert[T any](n *node[T], v T) {
    n.next = mkNode[T](v)
}

// n > 0
func mkList[T any](n int, v T) *node[T] {

    head := mkNode(v)
    current := head

    for i := 0; i < n-1; i++ {
        insert(current, v)
        current = current.next

    }
    return head

}

func len[T any](n *node[T]) int {
    i := 0

    for n != nil {
        i++
        n = n.next

    }

    return i

}

func testNode() {
    n1 := mkList[int](10, 1)
    fmt.Printf("\n%d", len(n1))

    n2 := mkList[bool](10, true)
    fmt.Printf("\n%d", len(n2))

}

// Generic translation (sketch)

type node_G struct {
    val  interface{}
    next *node_G
}

func mkNode_G(v interface{}) *node_G {
    return &node_G{val: v, next: nil}
}

// Monomorphization (sketch)

type node_int struct {
    val  int
    next *node_int
}

func mkNode_int(v int) *node_int {
    return &node_int{val: v, next: nil}
}



Example summing up numeric values

func sum[T int | float32](xs []T) T {
    var x T
    x = 0
    for _, v := range xs {

        x = x + v
    }

    return x

}



Example swap

func swap[T any](x *T, y *T) {
    tmp := *x
    *x = *y
    *y = tmp
}



slide 4/4
* help? contents? 
